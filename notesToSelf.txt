COOKIES:
-Small pieces of data stored on client-side to track and identify users
    * Browser (client) sends back cookie on subsequent requests

-Used to implement sessions

-Expiration dates:
    * Expires
    * Max Age
    * Without a specified expiration, cookies last for the duration of the
      sesssion

-Path attribute:
    * indicates a URL path that must exist in the requested URL in order to
      send the Cookie header

-Domain attribute:
    * specifies which server can receive a cookie 
    * if specified, cookies are available on the specified server AND its 
      subdomains
      ~i.e. Domain=.frontendmasters.com
       allows cookie to be sent to any subdomains of frontendmasters.com


-Common vulnerabilities:
  1. session hijacking
     exploits active sessions (cookie value) to gain unauthorized access- the attacker can 
     become the user as far as the server is concerned

  2. cross-site scripting (XSS)
     malicious script injected via input fields or URLs- the script then accesses cookies
     and sends them to an attacker

  3. cross-site request forgery (CSRF)
     a user is tricked into executing actions via a forged request exploiting that user's
     authenticated session

-Security:
    * HTTPOnly:
        ~prevents client-side scripts from accessing cookies
    * Secure:
        ~Ensures cookies are sent over HTTPS only
    * SameSite:
        ~Restricts how cookies are sent with cross-origin requests
        ~Two addresses are the SameSite if they have the same TLD
         plus one more level (i.e. example.com and login.example.com)

========================================================================

SAME ORIGIN POLICY:
-A security measure implemented by web browsers to restrict how documents or
 scripts loaded from one origin interact with resources from other origins
    * Two resources from different sites should not be able to interfere with 
      each other

-browser checks 3 things:
    1. protocol (i.e. https:// or http://)
    2. domain (i.e. frontendmasters.com)
    3. port (i.e. 443)
      * if the above 3 things are the same, the browser considers the two resources
        to have the same origin

-ways around Same Origin Policy:
    * Cross Origin Resource Sharing (CORS)
    * JSON with Padding (JSONP)
    * Proxies
    * PostMessage API
    * WebSockets
    * document.domain

========================================================================

SESSION HIJACKING & INJECTION:

-Privilege Escalation:
    * a type of security exploit in which an attacker gains elevated access to
      resources that are normally protected from an application or user
        1. attacker gains limited access to the application or system
        2. attacker identifies misconfigurations or vulnerabilities
        3. use weaknesses to gian higher privileges
        4. with escalated privileges, attacker can access sensitive data or execute
           unauthorized actions

-Session Hijacking:
    * Using a cookie value in an attempt to try to trick the server into thinking
      you're someone that you're not

-Man-in-the-Middle Attack:
    * A type of attack where the attacker secretly intercepts and possibly alters
      the communication between two parties who believe they are directly communicating
      with each other
    * Using HTTPS mitigates this issue

-SQL Injection:
    * in order to eliminate the threat of SQL injection:
      1. use an ORM (Object Relational Mapper)
        ~a layer of abstraction that allows the developer to interact with a database
        using code that resembles a given programming language instead of raw SQL queries
        ~primary protection an ORM provides against SQL injection comes from its 
        enforcement of parameterized queries
      2. ensure the use of parameterized queries over template literals

-Parameter Injection
    * security vulnerability that occurs when an attacker manipulates the parameters or 
      inputs used in parameterized queries, APIs, or other interfaces

-Command Injection
    * A type of security vulnerability in which an attacker can execute arbitrary commands
      on the host operating system via a vulnerable application
    * target would be application that passes unsafe user inputs to system shell commands

-Remote Code Execution
    * vulnerability that allows an attacker to execute arbitrary code on a remote system
    * occurs when user input is not properly sanitized
        ~malicious input is processed by the server through eval functions, unsanitized
         inputs to shell commands, or unsafe deserialization

-Prevention:
    * Input Validation:
        ~always validate and sanitize user inputs. use strict data types and constraints
    * Avoid Common Pitfalls:
        ~avoid using eval(), Function(), exec(), and other potentially dangerous Node.js
         functions
    * Use Security Libraries:
        ~use libraries such as DOMPurify for sanitizing HTML. use sandboxed environments
         like VM2 for executing untrusted code
    * Principle of Least Privilege:
        ~run services with the minimal required permissions. do not run your application
         as a root user
    * Updates:
        ~Keep Node.js and all dependencies up-to-date to mitigate known vulnerabilities

========================================================================

CROSS-SITE REQUEST FORGERY:

-A vulnerability that allows an attacker to make unauthorized requests on the user's
 behalf

-Three components:
    1. A relevant action:
        * something that catches the attacker's eye (email or password changes, balance 
          transfers, etc.)
    2. Cookie-based session handling:
        * In a CSRF attack, the attacker is tricking you into accidently performing
          action with your legitimate session authentication without your knowledge
    3. No unpredictable parameters:
        * The attacker needs to be able to guess what should be sent in order to get
          the desired outcome

-How it works:
    1. User logs into a web application and receives an authentication token (e.g. cookie)
    2. User visits a malicious website while still authenticated
    3. The malicious website contains code that sends a request to the authenticated web
       application
    4. The web application processes the request as if it were made by the user

-Cookie Attributes (and relationship with CSRF):
    * SameSite=None:
        ~always send the cookie
    * SameSite=Lax:
        ~allows cookies to be sent with top-level navigations and if the request method
         is safe (e.g. GET or HEAD requests)
    * SameSite=Strict:
        ~only include the cookie if the request is sent from the same site that set
         the cookie


-Difference between Site and Origin:

    _________(Origin)_________
   |                          |
    https://app.example.com:443
   |     |     |           | 
   -------     -------------
      |              |
      |______________|
              |
            (Site)

-Techniques for Preventing CSRF attacks:
    1. Generate a unique token (NOT a cookie!):
        * generate a token that validates that this is a legitimate request
    2. Use SameSite cookies:
        * limit cookies to only working with requests that come from your domain
    3. Set-up a CORS policy:
        * implement a strict Cross-Origin Resource Sharing policy to disallow
          unauthorized domains
    
-CSRF Tokens:
    * a CSRF token is a random value generated by the server. if a request is either
      missing or has an invalid token, the server will reject the request   
    * example:
        <input type="hidden"
         name="csrf"
         value="3964ccc5b64f546961343c57cf"
         required 
        />  
    * if using mostly AJAX requests (not forms) store the CSRF token in a meta tag:
        ~example:
            <meta 
             name="csrf-token"
             content="3964ccc5b64f546961343c57cf"
            />
